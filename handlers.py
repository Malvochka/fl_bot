from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from plant_storage import *
from states import PlantForm
from keyboards import main_menu, calendar_menu, generate_edit_menu
from datetime import datetime

router = Router()

@router.message(F.text == "/start")
async def start(message: Message):
    photo = FSInputFile("welcome.jpg")
    await message.answer_photo(photo, caption="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=main_menu)

@router.message(F.text == "/id")
async def get_id(message: Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")

@router.message(F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def calendar(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=calendar_menu)

@router.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def today(message: Message):
    today_plants = get_today_plans()
    if today_plants:
        text = "\n".join(f"‚Ä¢ {p['name']}" for p in today_plants)
        await message.answer(f"–°–µ–≥–æ–¥–Ω—è –ø–æ–ª–∏–≤–∞–µ–º:\n{text}")
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–ª–∏–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.")

@router.message(F.text == "–ù–µ–¥–µ–ª—è")
async def week(message: Message):
    week = get_week_plans()
    reply = ""
    for day, items in week:
        plants = ", ".join(items) if items else "‚Äî"
        reply += f"{day}: {plants}\n"
    await message.answer(reply)

@router.message(F.text == "üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
async def add_plant_start(message: Message, state: FSMContext):
    await state.set_state(PlantForm.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")

@router.message(PlantForm.name)
async def plant_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(PlantForm.interval)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–æ–ª–∏–≤–∞–º–∏?")

@router.message(PlantForm.interval)
async def plant_interval(message: Message, state: FSMContext):
    try:
        interval = int(message.text)
        await state.update_data(interval=interval)
        await state.set_state(PlantForm.start_date)
        await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–∏–≤–∞? (–ì–ì–ì–ì-–ú–ú-–î–î)")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")

@router.message(PlantForm.start_date)
async def plant_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        data = await state.get_data()
        add_plant(data['name'], data['interval'], start_date)
        await message.answer("–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        await state.clear()
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-05-01")

@router.message(F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞")
async def edit_menu(message: Message):
    plants = list_plants()
    if not plants:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=generate_edit_menu(plants))

@router.callback_query(F.data.startswith("delete_"))
async def delete_plant_handler(callback: CallbackQuery):
    plant_id = int(callback.data.split("_")[1])
    delete_plant(plant_id)
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data.startswith("edit_"))
async def edit_plant_handler(callback: CallbackQuery, state: FSMContext):
    plant_id = int(callback.data.split("_")[1])
    await state.set_state(PlantForm.name)
    await state.update_data(editing_id=plant_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
    await callback.answer()

@router.message(PlantForm.name)
async def new_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(PlantForm.interval)
    await message.answer("–ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–∏–≤–∞ (–≤ –¥–Ω—è—Ö)?")

@router.message(PlantForm.interval)
async def new_interval(message: Message, state: FSMContext):
    try:
        interval = int(message.text)
        await state.update_data(interval=interval)
        await state.set_state(PlantForm.start_date)
        await message.answer("–ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–∏–≤–∞? (–ì–ì–ì–ì-–ú–ú-–î–î)")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(PlantForm.start_date)
async def new_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        data = await state.get_data()
        update_plant(
            plant_id=data['editing_id'],
            name=data['name'],
            interval=data['interval'],
            start_date=start_date
        )
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
        await state.clear()
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")


@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


